# from math import floor, log2
# import networkx as nx
# from networkx.drawing.nx_agraph import graphviz_layout
# import matplotlib.pyplot as plt  # Add this import
# nx_args={'with_labels':True, 'node_color':"white", 'edgecolors':"black", 'node_size':400}

class Heap:
    def __init__(self, A:list|int): ...

    def max(self): ...

    def ExtractMax(self): ...

    def Insert(self, x:int): ...

    def __iadd__(self, number:int): ...

    def __add__(self, number:int): ...

    def ChangeKey(self, x, k): ...

    def __setitem__(self, index, value): ...

    def IncreaseKey(self, x,k): ...
    

    def BubbleUp(self, x): ...


    def BubbleDown(self, x): ...


    def left(self, x): ...

    def right(self, x): ...

    def parent(self, x): ...
    
    def draw(self): ...

    def __str__(self): ...
    
    def print_raw(self): ...

    def is_heap(self): ...


    def __bool__(self): ...
    
    

    def __getitem__(self, index): ...
    

    def __iter__(self): ...

    

    def __contains__(self, value): ...

class UnionFind:    

    def __init__(self, n:int): ...
  

    def Union(self, i:int,j:int): ...

  

    def Find(self, i:int): ...


    def __repr__(self): ...

class QuickUnion():

    def __init__(self, n:int): ...


    def Union(self, i:int, j:int): ...


    def dUnion(self, i:int, j:int): ...


    def Find(self, i:int): ...

    def path_compression(self, i:int): ...


    def dPath_compression(self, i:int): ...


    def __repr__(self): ...

    def display(self, text = ""): ...


class WeightedQuickUnion():

    def __init__(self, n:int): ...


    def Union(self, i:int, j:int): ...


    def dUnion(self, i:int, j:int): ...

    def Find(self, i:int): ...

    def __repr__(self): ...

    def display(self, text: str = ""): ...

class BinarySearchTree():
    def __init__(self): ...

    def insert(self, x:int, v = "root"): ...

    def dInsert(self, x:int): ...

    def preorder_traversal(self): ...

    def draw(self): ...

class DoubleLinkedList():
    def __init__(self, key): ... 

def BFS(adjancency_list : dict, startnode:int): ...

def DFS(adjancency_list : dict, startnode:int): ...